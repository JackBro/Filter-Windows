/*
* Copyright © 2017 Cloudveil Technology Inc.
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

using System;

namespace Citadel.IPC.Messages
{
    [Serializable]
    public enum RelaxedPolicyStatus
    {
        /// <summary>
        /// Returned when all policies for the day are used up.
        /// </summary>
        AllUsed,

        /// <summary>
        /// Means that the user's click action caused the current relaxed policy to clear.
        /// </summary>
        Relinquished,

        /// <summary>
        /// Means that the relaxed policy is activated and no click action occurred.
        /// </summary>
        Activated,

        /// <summary>
        /// Means that the user's click action to request a relaxed policy was granted.
        /// </summary>
        Granted,

        /// <summary>
        /// Means that the relaxed policy was already relinquished.
        /// </summary>
        AlreadyRelinquished,

        /// <summary>
        /// Relaxed policy is currently deactivated and no click action occurred.
        /// </summary>
        Deactivated
    }

    /// <summary>
    /// Enum of the different commands that a deactivation message can represent. 
    /// </summary>
    [Serializable]
    public enum RelaxedPolicyCommand
    {
        /// <summary>
        /// Means that the client is requesting the use of a relaxed policy, if any. 
        /// </summary>
        Requested,

        /// <summary>
        /// Means that the client is, of their own volition, surrending either a current, in use
        /// relaxed policy, or a reserved relaxed policy use if non is in effect at the time of this message.
        /// </summary>
        Relinquished,

        /// <summary>
        /// Means that the server is sending information about available relaxed policies to the
        /// client. The PolicyInfo property of the message MUST be set to a valid value.
        /// </summary>
        Info,

        /// <summary>
        /// Means that the server is notifying the client that a relaxed policy that was in effect
        /// has just expired.
        /// </summary>
        Expired
    }

    /// <summary>
    /// The RelaxedPolicyInfo class provides information in a unidirectional fashion from the server
    /// to the client, to notify the client of how many relaxed policy uses they have for the day,
    /// and how long each relaxed policy is in effect for. This cannot be constructed by a client.
    /// This MUST be included whenever a RelaxedPolicyMessage with the Command Info is generated by
    /// the server for the client.
    /// </summary>
    [Serializable]
    public class RelaxedPolicyInfo : ServerOnlyMessage
    {
        /// <summary>
        /// The duration of each relaxed policy. 
        /// </summary>
        public TimeSpan RelaxDuration
        {
            get;
            private set;
        } = TimeSpan.Zero;

        /// <summary>
        /// The total number of relaxed policies available for the current day, if any. 
        /// </summary>
        public int NumberAvailableToday
        {
            get;
            private set;
        } = 0;

        public RelaxedPolicyStatus Status { get; private set; }
        
        /// <summary>
        /// Constructs a new RelaxedPolicyInfo instance. 
        /// </summary>
        /// <param name="relaxDuration">
        /// The duration of each relaxed policy use. 
        /// </param>
        /// <param name="numberAvailableToday">
        /// The total number of relaxed policies available for the current day. 
        /// </param>
        /// <param name="isActive">
        /// Whether or not the relaxed policy is active.
        /// </param>
        /// <param name="command">
        /// The command which caused this info to be sent.
        /// </param>
        public RelaxedPolicyInfo(TimeSpan relaxDuration, int numberAvailableToday, RelaxedPolicyStatus status)
        {
            RelaxDuration = relaxDuration;
            NumberAvailableToday = numberAvailableToday;
            Status = status;
        }
    }

    /// <summary>
    /// The RelaxedPolicyMessage class represents an IPC communication between client (GUI) and
    /// server (Service) with regards to relaxed filter policies. Both the client and the server may
    /// generate these messages. The server will generate these messages to inform the client of
    /// what, if any, relaxed policies are available, and the client will generate these messages to
    /// ask the server to use them.
    /// </summary>
    /// <remarks>
    /// When the Command of the message is Info, the PolicyInfo should be populated with information
    /// from the server about how many uses are available for the day, and the duration of each use.
    /// If the Command is anything else, this property should be null.
    /// </remarks>
    [Serializable]
    public class RelaxedPolicyMessage : BaseMessage
    {
        /// <summary>
        /// Information about available policies. Only populated when this message is generated by
        /// the server and the Command is Info. Null otherwise.
        /// </summary>
        public RelaxedPolicyInfo PolicyInfo
        {
            get;
            private set;
        } = null;

        /// <summary>
        /// The command. 
        /// </summary>
        public RelaxedPolicyCommand Command
        {
            get;
            private set;
        }

        /// <summary>
        /// Constructs a new RelaxedPolicyMessage instance. 
        /// </summary>
        /// <param name="command">
        /// The command. 
        /// </param>
        /// <param name="policyInfo">
        /// Information about available policies. Only supply if the command is Info from the server.
        /// Null otherwise.
        /// </param>
        public RelaxedPolicyMessage(RelaxedPolicyCommand command, RelaxedPolicyInfo policyInfo = null)
        {
            PolicyInfo = policyInfo;
            Command = command;
        }
    }
}