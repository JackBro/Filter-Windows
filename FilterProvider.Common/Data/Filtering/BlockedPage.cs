// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FilterProvider.Common.Data.Filtering
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Filter.Platform.Common.Data.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\code\Filter-Windows\FilterProvider.Common\Data\Filtering\BlockedPage.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class BlockedPage : BlockedPageBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<!--\r\n    * Copyright © 2017 CloudVeil Technology, Inc.\r\n    *" +
                    " This Source Code Form is subject to the terms of the Mozilla Public\r\n    * Lice" +
                    "nse, v. 2.0. If a copy of the MPL was not distributed with this\r\n    * file, You" +
                    " can obtain one at http://mozilla.org/MPL/2.0/.\r\n-->\r\n<!--\r\nThe line below is us" +
                    "ed by the filter tester to determine whether the filter is working\r\n    filterin" +
                    "g:ok-J1ynoE8POR\r\n-->\r\n\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n" +
                    "    <title>Page Blocked</title>\r\n\r\n    <style>\r\n        body {\r\n            font" +
                    "-family: \"Open Sans\", sans-serif;\r\n            background-color: transparent;\r\n " +
                    "           color: #4c4c4c;\r\n\r\n            margin: 0px;\r\n        }\r\n\r\n        p {" +
                    "\r\n            margin: 0;\r\n        }\r\n\r\n        div#wrapper {\r\n            displa" +
                    "y: table;\r\n            text-align: center;\r\n            height: 0px;\r\n          " +
                    "  position: absolute;\r\n            overflow: visible;\r\n            display: bloc" +
                    "k;\r\n            width: 100%;\r\n            left: 0px;\r\n            top: 10%;\r\n   " +
                    "     }\r\n\r\n        div#center {\r\n            background-color: transparent;\r\n    " +
                    "        overflow: hidden;\r\n            position: absolute;\r\n            left: 50" +
                    "%;\r\n            margin-left: -200px;\r\n            width: 400px;\r\n            hei" +
                    "ght: 300px;\r\n            top: -150px;\r\n        }\r\n\r\n        div#center > child {" +
                    "\r\n            display: table-cell;\r\n            text-align: center;\r\n           " +
                    " vertical-align: middle;\r\n        }\r\n\r\n        a.button.request-unblock {\r\n     " +
                    "       display: block;\r\n            margin: 20px auto 0 auto;\r\n            width" +
                    ": 150px;\r\n        }\r\n\r\n        /* Borrowed from metro.css */\r\n        .button {\r" +
                    "\n            padding: 0 1rem;\r\n            height: 2.125rem;\r\n            text-a" +
                    "lign:center;\r\n            vertical-align:middle;\r\n            border: 1px #d9d9d" +
                    "9 solid;\r\n            cursor: pointer;\r\n            text-decoration: none;\r\n    " +
                    "        display: inline-block;\r\n            outline: none;\r\n            font-siz" +
                    "e: 0.875rem;\r\n            margin: 0.15625rem 0;\r\n            position: relative;" +
                    "\r\n        }\r\n\r\n        .button.primary {\r\n            background: #2086bf;\r\n    " +
                    "        color: #fff;\r\n            border-color: #2086bf;\r\n        }\r\n\r\n        ." +
                    "button.primary:active {\r\n            background: #1b6eae;\r\n            color: #f" +
                    "ff;\r\n        }\r\n\r\n        .button:active {\r\n            box-shadow: none;\r\n     " +
                    "   }\r\n\r\n        .request-unblock:visited {\r\n            color: inherit;\r\n       " +
                    " }\r\n\r\n        a.button {\r\n            line-height: 2.125rem;\r\n        }\r\n\r\n     " +
                    "   p.category {\r\n            font-weight: 700;\r\n            margin-bottom: 20px;" +
                    "\r\n        }\r\n\r\n        p.category.other {\r\n            font-weight: 400;\r\n      " +
                    "  }\r\n\r\n    </style>\r\n</head>\r\n\r\n<body id=\"home\">\r\n    <div id=\"wrapper\">\r\n      " +
                    "  <h1>Content Blocked</h1>\r\n        <!-- This block page does not use angular; i" +
                    "t\'s just that the angular templating works well for find and replace. -->\r\n\r\n   " +
                    "     <!-- Look at FilterServiceProvider.GetBlockedResponse for a list of availab" +
                    "le template variables. -->\r\n        <p><a href=\"{{url_text}}\">{{friendly_url_tex" +
                    "t}}</a> was blocked because it was in the following category:</p>\r\n        <p cl" +
                    "ass=\"category\">\r\n            ");
            
            #line 133 "E:\code\Filter-Windows\FilterProvider.Common\Data\Filtering\BlockedPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(data.MatchingCategory?.ShortCategoryName));
            
            #line default
            #line hidden
            this.Write("\r\n        </p>\r\n\r\n        ");
            
            #line 136 "E:\code\Filter-Windows\FilterProvider.Common\Data\Filtering\BlockedPage.tt"
 foreach(var entry in data.AppliedCategories)
        {
            if(data.MatchingCategory?.CategoryId != entry.CategoryId)
            { 
            
            #line default
            #line hidden
            this.Write("                <p class=\'category other\'>");
            
            #line 140 "E:\code\Filter-Windows\FilterProvider.Common\Data\Filtering\BlockedPage.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.ShortCategoryName));
            
            #line default
            #line hidden
            this.Write("</p>\r\n            ");
            
            #line 141 "E:\code\Filter-Windows\FilterProvider.Common\Data\Filtering\BlockedPage.tt"
}
        }
        
        if(data.MatchingCategory is MappedBypassListCategoryModel)
        { 
            
            #line default
            #line hidden
            this.Write("            <p style=\'margin-top: 10px;\'>This site is allowed by the relaxed poli" +
                    "cy. To access it, open CloudVeil for Windows, go to settings, then click \'use re" +
                    "laxed policy\'</p>\";\r\n        ");
            
            #line 147 "E:\code\Filter-Windows\FilterProvider.Common\Data\Filtering\BlockedPage.tt"
 }
        
        if(data.CanRequestUnblock())
        { 
            
            #line default
            #line hidden
            this.Write("        <a class=\"request-unblock button primary\" href=\"{{unblock_request}}\">Requ" +
                    "est an Unblock</a>\r\n        ");
            
            #line 152 "E:\code\Filter-Windows\FilterProvider.Common\Data\Filtering\BlockedPage.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"    </div>

    <script>
        document.onreadystatechange = function () {

            function inIframe() {
                try {
                    return window.self !== window.top;
                } catch (e) {
                    return true;
                }
            }

            if (document.readyState.toUpperCase() == ""complete"".toUpperCase()) {

                if (inIframe()) {
                    document.getElementById('wrapper').setAttribute(""display"", ""none"");
                } else {
                    console.log('nope');
                }
            }
        }
    </script>
</body>
</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class BlockedPageBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
